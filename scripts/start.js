'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');


const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const semver = require('semver');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const getClientEnvironment = require('../config/env');
const react = require(require.resolve('react', { paths: [paths.appPath] }));

const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));
const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
// 检测项目里面有没有存在 【入口html文件】 和 【入口js文件】
// 具体入口html和js文件是哪个可以看 config/paths.js 里面
// 在 react 中默认分别是 public/index.html 和 src/index.js
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  // 如果不存在，退出进程
  process.exit(1);
}

// Tools like Cloud9 rely on this.
// 判断有没有配置过 host 地址和端口，没有就使用默认的 0.0.0.0:3000
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow('https://cra.link/advanced-config')}`
  );
  console.log();
}

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
// 检测使用什么浏览器，默认根据 browserslist 去选择
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath, isInteractive)
  .then(() => {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    // 选择端口：如果端口被占用了，就会提示是否换一个端口
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then(port => {
    // 如果端口不存在，直接 return
    if (port == null) {
      // We have not found a port.
      return;
    }

    //  执行 configFactory 返回一份 development 环境的 webpack 配置
    // configFactory 函数就是 config/webpack.config.js 下面导出的函数
    const config = configFactory('development');

    // http 的协议
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';

    // app 的名字，主要从 package.json 中拿到
    const appName = require(paths.appPackageJson).name;

    // 是否使用 ts 
    const useTypeScript = fs.existsSync(paths.appTsConfig);
    // tsc 编译出现错误，react 是否不能再正常编译下去
    const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';


    const urls = prepareUrls(
      protocol,
      HOST,
      port,
      paths.publicUrlOrPath.slice(0, -1)
    );
    const devSocket = {
      warnings: warnings =>
        devServer.sockWrite(devServer.sockets, 'warnings', warnings),
      errors: errors =>
        devServer.sockWrite(devServer.sockets, 'errors', errors),
    };

    // 创建 webpack 的 compiler
    // create-react-app 不使用 webpack-cli 启动 webpack，而是通过调用 webpack 函数返回 compiler 对象
    const compiler = createCompiler({
      appName,
      config,
      devSocket,
      urls,
      useYarn,
      useTypeScript,
      tscCompileOnError,
      webpack,
    });

    // 加载 proxy 配置，从 package.json 中加载
    // 这就说明在 react 中，proxy 代理相关的东西可以写到 package.json 中k
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(
      proxySetting,
      paths.appPublic,
      paths.publicUrlOrPath
    );
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    // 通过 new WebpackDevServer 来创建 webpack 的 devServer 对象
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // 启动 devServer 本地服务
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }

      if (env.raw.FAST_REFRESH && semver.lt(react.version, '16.10.0')) {
        console.log(
          chalk.yellow(
            `Fast Refresh requires React 16.10 or higher. You are using React ${react.version}.`
          )
        );
      }

      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
      process.on(sig, function () {
        devServer.close();
        process.exit();
      });
    });

    if (process.env.CI !== 'true') {
      // Gracefully exit when stdin ends
      process.stdin.on('end', function () {
        devServer.close();
        process.exit();
      });
    }
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
